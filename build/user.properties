#
# Front-End Application Build Script
# Member Experience Team
# 



## describe your team
## ----------------------------------------------------------------------------

info.team									= NA
info.poc									= Michael Jaworski
info.email								= NA
info.version							= 1



## describe your application
## ----------------------------------------------------------------------------

# the full human-readable name of your application
app.name									= Sage

# the export name of the application (use in pathes for export) 
app.filename							= sage

# from build script to root of project folder
app.dir.app-root					= ../..

# from application to root Eclipse folder, used to find other projects
app.dir.project-root			= ${app.dir.app-root}/..

# NOTE all folders are relative to ${app.dir.app-root}

# common source folder for front-end code
app.dir.source						= src

# common library folder (dependent files) for front-end solutions
app.dir.lib								= lib

# write build output to bin(ary) folder
app.dir.bin								= deploy

# write docs from js docs
app.dir.docs							= autodocs

# javascript library folder (dependencies)
app.path.js								= ${app.dir.lib}/js

# css library folder (dependencies)
app.path.css							= ${app.dir.lib}/css

# path to test script
app.path.test							= test/index.html



## enable compilation and inclusion of MX projects
## ----------------------------------------------------------------------------

# folder to place all MX projects in
library.path 							= ${app.dir.app-root}/${app.dir.lib}/js
nucleus.use 							= false
fyre.use 									= false
ice.use 									= false
phoenix.use 							= false

# toggle build of this project
app.use										= true

# leave build folder and build files over or erase build folder first
deploy.wipe								= true

# precompile css with (sass, less, yui, none)
# there must be no spaces after the name
css.precompiler						= sass
css.enable								= false

# turn closure compiler on/off
js.enable									= true

# turn JSDoc on/off
docs.enable								= falseS



## describe all build paths, each instruction is a collection
## of data separated by commas. multiple instructions are seperated
## by semi-colon
## ----------------------------------------------------------------------------

# app.demo								= part-1, part-2; part-1, part-2

# 1 -- folder to copy from
# 2 -- folder to copy to
app.archives							= 

# 1 -- css or less file with imports (master dev)
# 2 -- compiled down css file
app.compile.styles				= 

# 1 -- source folder
# 2 -- relative path from goog/base.js to source folder
# 3 -- hotload file (should be in  source folder)
app.compile.scripts.dev		= ${app.dir.source}/, ../${app.dir.source}/, ${app.dir.bin}/${app.filename}-${info.version}.js;
									
# 1 -- namespace (top-level goog.provide to pull all source from)
# 2 -- folder source (for all js)
# 3 -- compiled file (with path)												
app.compile.scripts.prod	= ${app.filename}.library, ${app.dir.source}/, ${app.dir.bin}/${app.filename}-${info.version}.js;

# 1 -- source folder
# 2 -- autodocs folder
app.document.scripts			= 
														
														

## Javascript and CSS Compilation Configuration
## ----------------------------------------------------------------------------

# if using LESS
# activate css minification (-O0, -O1, -O2) - real optimization, -x just removed whitespace

# is using SASS
# activate css minification (nested, compact, compressed, expanded)
config.dev.css.minify 				= compact
config.stage.css.minify 			= compressed 
config.prod.css.minify 				= compressed

# set the compile method (SASS)
config.dev.sass.mode 					= --update
config.stage.sass.mode 				= --update 
config.prod.sass.mode 				= --update

# add compile options (SASS)
config.dev.sass.options 			= --debug-info
config.stage.sass.options 		= --force
config.prod.sass.options 			= --force

# closure documentation (https://developers.google.com/closure/compiler/docs/api-ref)
# compiler compression level 
# ADVANCED_OPTIMIZATION needs a lot of work to make work properly, do not use unless
# you know what you are doing, or the code will be unusable 
config.test.js.minify				 	= --compiler_flags=--formatting=PRINT_INPUT_DELIMITER
config.stage.js.minify 				= --compiler_flags=--compilation_level=SIMPLE_OPTIMIZATIONS
config.prod.js.minify					= --compiler_flags=--compilation_level=SIMPLE_OPTIMIZATIONS

# compiler warning level (what will halt the compilation process)
# a measure of the compilers sensitivity to errors
config.test.compiler.warning 	= --compiler_flags=--warning_level=DEFAULT
config.stage.compiler.warning = --compiler_flags=--warning_level=DEFAULT
config.prod.compiler.warning	= --compiler_flags=--warning_level=DEFAULT

# compiler output level (logging)
config.test.compiler.output		= --compiler_flags=--summary_detail_level=3
config.stage.compiler.output	= --compiler_flags=--summary_detail_level=1
config.prod.compiler.output		= --compiler_flags=--summary_detail_level=1

# closure documentation https://developers.google.com/closure/compiler/docs/js-for-compiler#tags
# configure constants (conditional compilation)
# --compiler_flags=--define='CONST=val,CONST=val'
# leaves checks in, not conditioanl compilation (just compile-time constants, checked at run-time)
config.test.compiler.define 	= --compiler_flags=--define='DEBUG=true' 
config.stage.compiler.define 	= --compiler_flags=--define='DEBUG=false'
config.prod.compiler.define 	= --compiler_flags=--define='DEBUG=false'



